"""
A test for add_integer function
===============================
Usage
=====

``add_integer(...)``` returns the addition of its two arguments. For numbers,
that value is equivalent to using the ``+`` operator.
How to use ``add_integer`` function

>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(2, 5)
7


>>> add_integer(2, -1)
1


>>> add_integer(2.8, 3.1)
5

>>> add_integer(-2.8, -3.1)
-5

>>> add_integer(-3)
95


>>> add_integer(a=1)
99

>>> add_integer(a=1, 98)
Traceback (most recent call last):
SyntaxError: positional argument follows keyword argument

>>> add_integer(None)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(None, None)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer("4")
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer("4", 9)
Traceback (most recent call last):
TypeError: a must be an integer


>>> add_integer("4", "9")
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer("4", b="9")
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(4, "9")
Traceback (most recent call last):
TypeError: b must be an integer

>>> add_integer(4, b="9")
Traceback (most recent call last):
TypeError: b must be an integer

>>> add_integer(a=1, 98)
Traceback (most recent call last):
SyntaxError: positional argument follows keyword argument


>>> add_integer(a=4, b=9)
13

>>> add_integer(float('inf'))
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

And again with NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

"""